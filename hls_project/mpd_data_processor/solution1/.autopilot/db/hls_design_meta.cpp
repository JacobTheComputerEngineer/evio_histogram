#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("s_evIn_dout", 33, hls_in, 0, "ap_fifo", "fifo_port_we", 1),
	Port_Property("s_evIn_empty_n", 1, hls_in, 0, "ap_fifo", "fifo_status", 1),
	Port_Property("s_evIn_read", 1, hls_out, 0, "ap_fifo", "fifo_data", 1),
	Port_Property("s_evOut_din", 33, hls_out, 1, "ap_fifo", "fifo_port_we", 1),
	Port_Property("s_evOut_full_n", 1, hls_in, 1, "ap_fifo", "fifo_status", 1),
	Port_Property("s_evOut_write", 1, hls_out, 1, "ap_fifo", "fifo_data", 1),
	Port_Property("build_all_samples", 1, hls_in, 2, "ap_stable", "in_data", 1),
	Port_Property("build_debug_headers", 1, hls_in, 3, "ap_stable", "in_data", 1),
	Port_Property("enable_cm", 1, hls_in, 4, "ap_stable", "in_data", 1),
	Port_Property("fiber", 5, hls_in, 5, "ap_stable", "in_data", 1),
	Port_Property("m_offset_address0", 10, hls_out, 6, "ap_memory", "mem_address", 1),
	Port_Property("m_offset_ce0", 1, hls_out, 6, "ap_memory", "mem_ce", 1),
	Port_Property("m_offset_d0", 26, hls_out, 6, "ap_memory", "mem_din", 1),
	Port_Property("m_offset_q0", 26, hls_in, 6, "ap_memory", "mem_dout", 1),
	Port_Property("m_offset_we0", 1, hls_out, 6, "ap_memory", "mem_we", 1),
	Port_Property("m_offset_address1", 10, hls_out, 6, "ap_memory", "mem_address", 1),
	Port_Property("m_offset_ce1", 1, hls_out, 6, "ap_memory", "mem_ce", 1),
	Port_Property("m_offset_d1", 26, hls_out, 6, "ap_memory", "mem_din", 1),
	Port_Property("m_offset_q1", 26, hls_in, 6, "ap_memory", "mem_dout", 1),
	Port_Property("m_offset_we1", 1, hls_out, 6, "ap_memory", "mem_we", 1),
	Port_Property("m_apvThr_address0", 11, hls_out, 7, "ap_memory", "mem_address", 1),
	Port_Property("m_apvThr_ce0", 1, hls_out, 7, "ap_memory", "mem_ce", 1),
	Port_Property("m_apvThr_d0", 13, hls_out, 7, "ap_memory", "mem_din", 1),
	Port_Property("m_apvThr_q0", 13, hls_in, 7, "ap_memory", "mem_dout", 1),
	Port_Property("m_apvThr_we0", 1, hls_out, 7, "ap_memory", "mem_we", 1),
	Port_Property("m_apvThr_address1", 11, hls_out, 7, "ap_memory", "mem_address", 1),
	Port_Property("m_apvThr_ce1", 1, hls_out, 7, "ap_memory", "mem_ce", 1),
	Port_Property("m_apvThr_d1", 13, hls_out, 7, "ap_memory", "mem_din", 1),
	Port_Property("m_apvThr_q1", 13, hls_in, 7, "ap_memory", "mem_dout", 1),
	Port_Property("m_apvThr_we1", 1, hls_out, 7, "ap_memory", "mem_we", 1),
	Port_Property("m_apvThrB_address0", 11, hls_out, 8, "ap_memory", "mem_address", 1),
	Port_Property("m_apvThrB_ce0", 1, hls_out, 8, "ap_memory", "mem_ce", 1),
	Port_Property("m_apvThrB_d0", 13, hls_out, 8, "ap_memory", "mem_din", 1),
	Port_Property("m_apvThrB_q0", 13, hls_in, 8, "ap_memory", "mem_dout", 1),
	Port_Property("m_apvThrB_we0", 1, hls_out, 8, "ap_memory", "mem_we", 1),
	Port_Property("m_apvThrB_address1", 11, hls_out, 8, "ap_memory", "mem_address", 1),
	Port_Property("m_apvThrB_ce1", 1, hls_out, 8, "ap_memory", "mem_ce", 1),
	Port_Property("m_apvThrB_d1", 13, hls_out, 8, "ap_memory", "mem_din", 1),
	Port_Property("m_apvThrB_q1", 13, hls_in, 8, "ap_memory", "mem_dout", 1),
	Port_Property("m_apvThrB_we1", 1, hls_out, 8, "ap_memory", "mem_we", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst", 1, hls_in, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "mpd_data_processor_main";
