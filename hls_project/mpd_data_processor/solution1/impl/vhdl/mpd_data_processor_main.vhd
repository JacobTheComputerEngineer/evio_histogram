-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mpd_data_processor_main is
port (
    s_evIn_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    s_evIn_empty_n : IN STD_LOGIC;
    s_evIn_read : OUT STD_LOGIC;
    s_evOut_din : OUT STD_LOGIC_VECTOR (32 downto 0);
    s_evOut_full_n : IN STD_LOGIC;
    s_evOut_write : OUT STD_LOGIC;
    build_all_samples : IN STD_LOGIC_VECTOR (0 downto 0);
    build_debug_headers : IN STD_LOGIC_VECTOR (0 downto 0);
    enable_cm : IN STD_LOGIC_VECTOR (0 downto 0);
    fiber : IN STD_LOGIC_VECTOR (4 downto 0);
    m_offset_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    m_offset_ce0 : OUT STD_LOGIC;
    m_offset_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    m_offset_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    m_offset_we0 : OUT STD_LOGIC;
    m_offset_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    m_offset_ce1 : OUT STD_LOGIC;
    m_offset_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    m_offset_q1 : IN STD_LOGIC_VECTOR (25 downto 0);
    m_offset_we1 : OUT STD_LOGIC;
    m_apvThr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    m_apvThr_ce0 : OUT STD_LOGIC;
    m_apvThr_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_apvThr_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    m_apvThr_we0 : OUT STD_LOGIC;
    m_apvThr_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    m_apvThr_ce1 : OUT STD_LOGIC;
    m_apvThr_d1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_apvThr_q1 : IN STD_LOGIC_VECTOR (12 downto 0);
    m_apvThr_we1 : OUT STD_LOGIC;
    m_apvThrB_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    m_apvThrB_ce0 : OUT STD_LOGIC;
    m_apvThrB_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_apvThrB_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    m_apvThrB_we0 : OUT STD_LOGIC;
    m_apvThrB_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    m_apvThrB_ce1 : OUT STD_LOGIC;
    m_apvThrB_d1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    m_apvThrB_q1 : IN STD_LOGIC_VECTOR (12 downto 0);
    m_apvThrB_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of mpd_data_processor_main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mpd_data_processor_main_mpd_data_processor_main,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku035-ffva1156-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.668393,HLS_SYN_LAT=114,HLS_SYN_TPT=64,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3313,HLS_SYN_LUT=4805,HLS_VERSION=2023_1}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal frame_decoder_U0_ap_start : STD_LOGIC;
    signal frame_decoder_U0_ap_done : STD_LOGIC;
    signal frame_decoder_U0_ap_continue : STD_LOGIC;
    signal frame_decoder_U0_ap_idle : STD_LOGIC;
    signal frame_decoder_U0_ap_ready : STD_LOGIC;
    signal frame_decoder_U0_s_evIn_read : STD_LOGIC;
    signal frame_decoder_U0_s_avgASamples_din : STD_LOGIC_VECTOR (12 downto 0);
    signal frame_decoder_U0_s_avgASamples_write : STD_LOGIC;
    signal frame_decoder_U0_s_avgAPreHeader_din : STD_LOGIC_VECTOR (63 downto 0);
    signal frame_decoder_U0_s_avgAPreHeader_write : STD_LOGIC;
    signal frame_decoder_U0_start_out : STD_LOGIC;
    signal frame_decoder_U0_start_write : STD_LOGIC;
    signal frame_decoder_U0_m_offset_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal frame_decoder_U0_m_offset_ce0 : STD_LOGIC;
    signal avgHeaderDiv_U0_ap_start : STD_LOGIC;
    signal avgHeaderDiv_U0_ap_done : STD_LOGIC;
    signal avgHeaderDiv_U0_ap_continue : STD_LOGIC;
    signal avgHeaderDiv_U0_ap_idle : STD_LOGIC;
    signal avgHeaderDiv_U0_ap_ready : STD_LOGIC;
    signal avgHeaderDiv_U0_s_avgAPreHeader_read : STD_LOGIC;
    signal avgHeaderDiv_U0_s_avgBPreHeader_read : STD_LOGIC;
    signal avgHeaderDiv_U0_s_avgAHeader_din : STD_LOGIC_VECTOR (31 downto 0);
    signal avgHeaderDiv_U0_s_avgAHeader_write : STD_LOGIC;
    signal avgHeaderDiv_U0_s_avgBHeader_din : STD_LOGIC_VECTOR (31 downto 0);
    signal avgHeaderDiv_U0_s_avgBHeader_write : STD_LOGIC;
    signal avgB_U0_ap_start : STD_LOGIC;
    signal avgB_U0_ap_done : STD_LOGIC;
    signal avgB_U0_ap_continue : STD_LOGIC;
    signal avgB_U0_ap_idle : STD_LOGIC;
    signal avgB_U0_ap_ready : STD_LOGIC;
    signal avgB_U0_s_avgASamples_read : STD_LOGIC;
    signal avgB_U0_s_avgBSamplesOut_din : STD_LOGIC_VECTOR (12 downto 0);
    signal avgB_U0_s_avgBSamplesOut_write : STD_LOGIC;
    signal avgB_U0_s_avgAHeader_read : STD_LOGIC;
    signal avgB_U0_s_avgBPreHeader_din : STD_LOGIC_VECTOR (63 downto 0);
    signal avgB_U0_s_avgBPreHeader_write : STD_LOGIC;
    signal avgB_U0_start_out : STD_LOGIC;
    signal avgB_U0_start_write : STD_LOGIC;
    signal avgB_U0_m_apvThrB_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal avgB_U0_m_apvThrB_ce0 : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_ap_start : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_ap_done : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_ap_continue : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_ap_idle : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_ap_ready : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_s_avgBSamplesOut_read : STD_LOGIC;
    signal avgBSamplesFifoProc_U0_s_avgBSamplesIn_din : STD_LOGIC_VECTOR (31 downto 0);
    signal avgBSamplesFifoProc_U0_s_avgBSamplesIn_write : STD_LOGIC;
    signal event_writer_U0_ap_start : STD_LOGIC;
    signal event_writer_U0_ap_done : STD_LOGIC;
    signal event_writer_U0_ap_continue : STD_LOGIC;
    signal event_writer_U0_ap_idle : STD_LOGIC;
    signal event_writer_U0_ap_ready : STD_LOGIC;
    signal event_writer_U0_s_evOut_din : STD_LOGIC_VECTOR (32 downto 0);
    signal event_writer_U0_s_evOut_write : STD_LOGIC;
    signal event_writer_U0_s_avgBSamplesIn_read : STD_LOGIC;
    signal event_writer_U0_s_avgBHeader_read : STD_LOGIC;
    signal event_writer_U0_m_apvThr_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal event_writer_U0_m_apvThr_ce0 : STD_LOGIC;
    signal s_avgAPreHeader_full_n : STD_LOGIC;
    signal s_avgAPreHeader_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal s_avgAPreHeader_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgAPreHeader_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgAPreHeader_empty_n : STD_LOGIC;
    signal s_avgASamples_full_n : STD_LOGIC;
    signal s_avgASamples_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal s_avgASamples_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal s_avgASamples_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal s_avgASamples_empty_n : STD_LOGIC;
    signal s_avgBPreHeader_full_n : STD_LOGIC;
    signal s_avgBPreHeader_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal s_avgBPreHeader_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgBPreHeader_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgBPreHeader_empty_n : STD_LOGIC;
    signal s_avgAHeader_full_n : STD_LOGIC;
    signal s_avgAHeader_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal s_avgAHeader_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgAHeader_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgAHeader_empty_n : STD_LOGIC;
    signal s_avgBHeader_full_n : STD_LOGIC;
    signal s_avgBHeader_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal s_avgBHeader_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal s_avgBHeader_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal s_avgBHeader_empty_n : STD_LOGIC;
    signal s_avgBSamplesOut_full_n : STD_LOGIC;
    signal s_avgBSamplesOut_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal s_avgBSamplesOut_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgBSamplesOut_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgBSamplesOut_empty_n : STD_LOGIC;
    signal s_avgBSamplesIn_full_n : STD_LOGIC;
    signal s_avgBSamplesIn_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal s_avgBSamplesIn_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgBSamplesIn_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal s_avgBSamplesIn_empty_n : STD_LOGIC;
    signal start_for_avgHeaderDiv_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_avgHeaderDiv_U0_full_n : STD_LOGIC;
    signal start_for_avgHeaderDiv_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_avgHeaderDiv_U0_empty_n : STD_LOGIC;
    signal start_for_avgBSamplesFifoProc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_avgBSamplesFifoProc_U0_full_n : STD_LOGIC;
    signal start_for_avgBSamplesFifoProc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_avgBSamplesFifoProc_U0_empty_n : STD_LOGIC;

    component mpd_data_processor_main_frame_decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_evIn_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        s_evIn_empty_n : IN STD_LOGIC;
        s_evIn_read : OUT STD_LOGIC;
        s_avgASamples_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        s_avgASamples_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgASamples_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgASamples_full_n : IN STD_LOGIC;
        s_avgASamples_write : OUT STD_LOGIC;
        s_avgAPreHeader_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_avgAPreHeader_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAPreHeader_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAPreHeader_full_n : IN STD_LOGIC;
        s_avgAPreHeader_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_offset_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        m_offset_ce0 : OUT STD_LOGIC;
        m_offset_q0 : IN STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component mpd_data_processor_main_avgHeaderDiv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_avgAPreHeader_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        s_avgAPreHeader_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAPreHeader_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAPreHeader_empty_n : IN STD_LOGIC;
        s_avgAPreHeader_read : OUT STD_LOGIC;
        s_avgBPreHeader_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        s_avgBPreHeader_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBPreHeader_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBPreHeader_empty_n : IN STD_LOGIC;
        s_avgBPreHeader_read : OUT STD_LOGIC;
        s_avgAHeader_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_avgAHeader_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAHeader_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAHeader_full_n : IN STD_LOGIC;
        s_avgAHeader_write : OUT STD_LOGIC;
        s_avgBHeader_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_avgBHeader_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgBHeader_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgBHeader_full_n : IN STD_LOGIC;
        s_avgBHeader_write : OUT STD_LOGIC );
    end component;


    component mpd_data_processor_main_avgB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_avgASamples_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        s_avgASamples_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgASamples_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgASamples_empty_n : IN STD_LOGIC;
        s_avgASamples_read : OUT STD_LOGIC;
        s_avgBSamplesOut_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        s_avgBSamplesOut_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesOut_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesOut_full_n : IN STD_LOGIC;
        s_avgBSamplesOut_write : OUT STD_LOGIC;
        s_avgAHeader_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        s_avgAHeader_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAHeader_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgAHeader_empty_n : IN STD_LOGIC;
        s_avgAHeader_read : OUT STD_LOGIC;
        s_avgBPreHeader_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_avgBPreHeader_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBPreHeader_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBPreHeader_full_n : IN STD_LOGIC;
        s_avgBPreHeader_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_apvThrB_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        m_apvThrB_ce0 : OUT STD_LOGIC;
        m_apvThrB_q0 : IN STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component mpd_data_processor_main_avgBSamplesFifoProc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_avgBSamplesOut_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        s_avgBSamplesOut_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesOut_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesOut_empty_n : IN STD_LOGIC;
        s_avgBSamplesOut_read : OUT STD_LOGIC;
        s_avgBSamplesIn_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_avgBSamplesIn_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesIn_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesIn_full_n : IN STD_LOGIC;
        s_avgBSamplesIn_write : OUT STD_LOGIC );
    end component;


    component mpd_data_processor_main_event_writer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_evOut_din : OUT STD_LOGIC_VECTOR (32 downto 0);
        s_evOut_full_n : IN STD_LOGIC;
        s_evOut_write : OUT STD_LOGIC;
        s_avgBSamplesIn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        s_avgBSamplesIn_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesIn_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        s_avgBSamplesIn_empty_n : IN STD_LOGIC;
        s_avgBSamplesIn_read : OUT STD_LOGIC;
        s_avgBHeader_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        s_avgBHeader_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgBHeader_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        s_avgBHeader_empty_n : IN STD_LOGIC;
        s_avgBHeader_read : OUT STD_LOGIC;
        build_all_samples : IN STD_LOGIC_VECTOR (0 downto 0);
        enable_cm : IN STD_LOGIC_VECTOR (0 downto 0);
        fiber : IN STD_LOGIC_VECTOR (4 downto 0);
        m_apvThr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        m_apvThr_ce0 : OUT STD_LOGIC;
        m_apvThr_q0 : IN STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component mpd_data_processor_main_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mpd_data_processor_main_fifo_w13_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (12 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mpd_data_processor_main_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mpd_data_processor_main_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mpd_data_processor_main_fifo_w13_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (12 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mpd_data_processor_main_start_for_avgHeaderDiv_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mpd_data_processor_main_start_for_avgBSamplesFifoProc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    frame_decoder_U0 : component mpd_data_processor_main_frame_decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => frame_decoder_U0_ap_start,
        start_full_n => start_for_avgHeaderDiv_U0_full_n,
        ap_done => frame_decoder_U0_ap_done,
        ap_continue => frame_decoder_U0_ap_continue,
        ap_idle => frame_decoder_U0_ap_idle,
        ap_ready => frame_decoder_U0_ap_ready,
        s_evIn_dout => s_evIn_dout,
        s_evIn_empty_n => s_evIn_empty_n,
        s_evIn_read => frame_decoder_U0_s_evIn_read,
        s_avgASamples_din => frame_decoder_U0_s_avgASamples_din,
        s_avgASamples_num_data_valid => s_avgASamples_num_data_valid,
        s_avgASamples_fifo_cap => s_avgASamples_fifo_cap,
        s_avgASamples_full_n => s_avgASamples_full_n,
        s_avgASamples_write => frame_decoder_U0_s_avgASamples_write,
        s_avgAPreHeader_din => frame_decoder_U0_s_avgAPreHeader_din,
        s_avgAPreHeader_num_data_valid => s_avgAPreHeader_num_data_valid,
        s_avgAPreHeader_fifo_cap => s_avgAPreHeader_fifo_cap,
        s_avgAPreHeader_full_n => s_avgAPreHeader_full_n,
        s_avgAPreHeader_write => frame_decoder_U0_s_avgAPreHeader_write,
        start_out => frame_decoder_U0_start_out,
        start_write => frame_decoder_U0_start_write,
        m_offset_address0 => frame_decoder_U0_m_offset_address0,
        m_offset_ce0 => frame_decoder_U0_m_offset_ce0,
        m_offset_q0 => m_offset_q0);

    avgHeaderDiv_U0 : component mpd_data_processor_main_avgHeaderDiv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => avgHeaderDiv_U0_ap_start,
        ap_done => avgHeaderDiv_U0_ap_done,
        ap_continue => avgHeaderDiv_U0_ap_continue,
        ap_idle => avgHeaderDiv_U0_ap_idle,
        ap_ready => avgHeaderDiv_U0_ap_ready,
        s_avgAPreHeader_dout => s_avgAPreHeader_dout,
        s_avgAPreHeader_num_data_valid => s_avgAPreHeader_num_data_valid,
        s_avgAPreHeader_fifo_cap => s_avgAPreHeader_fifo_cap,
        s_avgAPreHeader_empty_n => s_avgAPreHeader_empty_n,
        s_avgAPreHeader_read => avgHeaderDiv_U0_s_avgAPreHeader_read,
        s_avgBPreHeader_dout => s_avgBPreHeader_dout,
        s_avgBPreHeader_num_data_valid => s_avgBPreHeader_num_data_valid,
        s_avgBPreHeader_fifo_cap => s_avgBPreHeader_fifo_cap,
        s_avgBPreHeader_empty_n => s_avgBPreHeader_empty_n,
        s_avgBPreHeader_read => avgHeaderDiv_U0_s_avgBPreHeader_read,
        s_avgAHeader_din => avgHeaderDiv_U0_s_avgAHeader_din,
        s_avgAHeader_num_data_valid => s_avgAHeader_num_data_valid,
        s_avgAHeader_fifo_cap => s_avgAHeader_fifo_cap,
        s_avgAHeader_full_n => s_avgAHeader_full_n,
        s_avgAHeader_write => avgHeaderDiv_U0_s_avgAHeader_write,
        s_avgBHeader_din => avgHeaderDiv_U0_s_avgBHeader_din,
        s_avgBHeader_num_data_valid => s_avgBHeader_num_data_valid,
        s_avgBHeader_fifo_cap => s_avgBHeader_fifo_cap,
        s_avgBHeader_full_n => s_avgBHeader_full_n,
        s_avgBHeader_write => avgHeaderDiv_U0_s_avgBHeader_write);

    avgB_U0 : component mpd_data_processor_main_avgB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => avgB_U0_ap_start,
        start_full_n => start_for_avgBSamplesFifoProc_U0_full_n,
        ap_done => avgB_U0_ap_done,
        ap_continue => avgB_U0_ap_continue,
        ap_idle => avgB_U0_ap_idle,
        ap_ready => avgB_U0_ap_ready,
        s_avgASamples_dout => s_avgASamples_dout,
        s_avgASamples_num_data_valid => s_avgASamples_num_data_valid,
        s_avgASamples_fifo_cap => s_avgASamples_fifo_cap,
        s_avgASamples_empty_n => s_avgASamples_empty_n,
        s_avgASamples_read => avgB_U0_s_avgASamples_read,
        s_avgBSamplesOut_din => avgB_U0_s_avgBSamplesOut_din,
        s_avgBSamplesOut_num_data_valid => s_avgBSamplesOut_num_data_valid,
        s_avgBSamplesOut_fifo_cap => s_avgBSamplesOut_fifo_cap,
        s_avgBSamplesOut_full_n => s_avgBSamplesOut_full_n,
        s_avgBSamplesOut_write => avgB_U0_s_avgBSamplesOut_write,
        s_avgAHeader_dout => s_avgAHeader_dout,
        s_avgAHeader_num_data_valid => s_avgAHeader_num_data_valid,
        s_avgAHeader_fifo_cap => s_avgAHeader_fifo_cap,
        s_avgAHeader_empty_n => s_avgAHeader_empty_n,
        s_avgAHeader_read => avgB_U0_s_avgAHeader_read,
        s_avgBPreHeader_din => avgB_U0_s_avgBPreHeader_din,
        s_avgBPreHeader_num_data_valid => s_avgBPreHeader_num_data_valid,
        s_avgBPreHeader_fifo_cap => s_avgBPreHeader_fifo_cap,
        s_avgBPreHeader_full_n => s_avgBPreHeader_full_n,
        s_avgBPreHeader_write => avgB_U0_s_avgBPreHeader_write,
        start_out => avgB_U0_start_out,
        start_write => avgB_U0_start_write,
        m_apvThrB_address0 => avgB_U0_m_apvThrB_address0,
        m_apvThrB_ce0 => avgB_U0_m_apvThrB_ce0,
        m_apvThrB_q0 => m_apvThrB_q0);

    avgBSamplesFifoProc_U0 : component mpd_data_processor_main_avgBSamplesFifoProc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => avgBSamplesFifoProc_U0_ap_start,
        ap_done => avgBSamplesFifoProc_U0_ap_done,
        ap_continue => avgBSamplesFifoProc_U0_ap_continue,
        ap_idle => avgBSamplesFifoProc_U0_ap_idle,
        ap_ready => avgBSamplesFifoProc_U0_ap_ready,
        s_avgBSamplesOut_dout => s_avgBSamplesOut_dout,
        s_avgBSamplesOut_num_data_valid => s_avgBSamplesOut_num_data_valid,
        s_avgBSamplesOut_fifo_cap => s_avgBSamplesOut_fifo_cap,
        s_avgBSamplesOut_empty_n => s_avgBSamplesOut_empty_n,
        s_avgBSamplesOut_read => avgBSamplesFifoProc_U0_s_avgBSamplesOut_read,
        s_avgBSamplesIn_din => avgBSamplesFifoProc_U0_s_avgBSamplesIn_din,
        s_avgBSamplesIn_num_data_valid => s_avgBSamplesIn_num_data_valid,
        s_avgBSamplesIn_fifo_cap => s_avgBSamplesIn_fifo_cap,
        s_avgBSamplesIn_full_n => s_avgBSamplesIn_full_n,
        s_avgBSamplesIn_write => avgBSamplesFifoProc_U0_s_avgBSamplesIn_write);

    event_writer_U0 : component mpd_data_processor_main_event_writer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => event_writer_U0_ap_start,
        ap_done => event_writer_U0_ap_done,
        ap_continue => event_writer_U0_ap_continue,
        ap_idle => event_writer_U0_ap_idle,
        ap_ready => event_writer_U0_ap_ready,
        s_evOut_din => event_writer_U0_s_evOut_din,
        s_evOut_full_n => s_evOut_full_n,
        s_evOut_write => event_writer_U0_s_evOut_write,
        s_avgBSamplesIn_dout => s_avgBSamplesIn_dout,
        s_avgBSamplesIn_num_data_valid => s_avgBSamplesIn_num_data_valid,
        s_avgBSamplesIn_fifo_cap => s_avgBSamplesIn_fifo_cap,
        s_avgBSamplesIn_empty_n => s_avgBSamplesIn_empty_n,
        s_avgBSamplesIn_read => event_writer_U0_s_avgBSamplesIn_read,
        s_avgBHeader_dout => s_avgBHeader_dout,
        s_avgBHeader_num_data_valid => s_avgBHeader_num_data_valid,
        s_avgBHeader_fifo_cap => s_avgBHeader_fifo_cap,
        s_avgBHeader_empty_n => s_avgBHeader_empty_n,
        s_avgBHeader_read => event_writer_U0_s_avgBHeader_read,
        build_all_samples => build_all_samples,
        enable_cm => enable_cm,
        fiber => fiber,
        m_apvThr_address0 => event_writer_U0_m_apvThr_address0,
        m_apvThr_ce0 => event_writer_U0_m_apvThr_ce0,
        m_apvThr_q0 => m_apvThr_q0);

    s_avgAPreHeader_U : component mpd_data_processor_main_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => frame_decoder_U0_s_avgAPreHeader_din,
        if_full_n => s_avgAPreHeader_full_n,
        if_write => frame_decoder_U0_s_avgAPreHeader_write,
        if_dout => s_avgAPreHeader_dout,
        if_num_data_valid => s_avgAPreHeader_num_data_valid,
        if_fifo_cap => s_avgAPreHeader_fifo_cap,
        if_empty_n => s_avgAPreHeader_empty_n,
        if_read => avgHeaderDiv_U0_s_avgAPreHeader_read);

    s_avgASamples_U : component mpd_data_processor_main_fifo_w13_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => frame_decoder_U0_s_avgASamples_din,
        if_full_n => s_avgASamples_full_n,
        if_write => frame_decoder_U0_s_avgASamples_write,
        if_dout => s_avgASamples_dout,
        if_num_data_valid => s_avgASamples_num_data_valid,
        if_fifo_cap => s_avgASamples_fifo_cap,
        if_empty_n => s_avgASamples_empty_n,
        if_read => avgB_U0_s_avgASamples_read);

    s_avgBPreHeader_U : component mpd_data_processor_main_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => avgB_U0_s_avgBPreHeader_din,
        if_full_n => s_avgBPreHeader_full_n,
        if_write => avgB_U0_s_avgBPreHeader_write,
        if_dout => s_avgBPreHeader_dout,
        if_num_data_valid => s_avgBPreHeader_num_data_valid,
        if_fifo_cap => s_avgBPreHeader_fifo_cap,
        if_empty_n => s_avgBPreHeader_empty_n,
        if_read => avgHeaderDiv_U0_s_avgBPreHeader_read);

    s_avgAHeader_U : component mpd_data_processor_main_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => avgHeaderDiv_U0_s_avgAHeader_din,
        if_full_n => s_avgAHeader_full_n,
        if_write => avgHeaderDiv_U0_s_avgAHeader_write,
        if_dout => s_avgAHeader_dout,
        if_num_data_valid => s_avgAHeader_num_data_valid,
        if_fifo_cap => s_avgAHeader_fifo_cap,
        if_empty_n => s_avgAHeader_empty_n,
        if_read => avgB_U0_s_avgAHeader_read);

    s_avgBHeader_U : component mpd_data_processor_main_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => avgHeaderDiv_U0_s_avgBHeader_din,
        if_full_n => s_avgBHeader_full_n,
        if_write => avgHeaderDiv_U0_s_avgBHeader_write,
        if_dout => s_avgBHeader_dout,
        if_num_data_valid => s_avgBHeader_num_data_valid,
        if_fifo_cap => s_avgBHeader_fifo_cap,
        if_empty_n => s_avgBHeader_empty_n,
        if_read => event_writer_U0_s_avgBHeader_read);

    s_avgBSamplesOut_U : component mpd_data_processor_main_fifo_w13_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => avgB_U0_s_avgBSamplesOut_din,
        if_full_n => s_avgBSamplesOut_full_n,
        if_write => avgB_U0_s_avgBSamplesOut_write,
        if_dout => s_avgBSamplesOut_dout,
        if_num_data_valid => s_avgBSamplesOut_num_data_valid,
        if_fifo_cap => s_avgBSamplesOut_fifo_cap,
        if_empty_n => s_avgBSamplesOut_empty_n,
        if_read => avgBSamplesFifoProc_U0_s_avgBSamplesOut_read);

    s_avgBSamplesIn_U : component mpd_data_processor_main_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => avgBSamplesFifoProc_U0_s_avgBSamplesIn_din,
        if_full_n => s_avgBSamplesIn_full_n,
        if_write => avgBSamplesFifoProc_U0_s_avgBSamplesIn_write,
        if_dout => s_avgBSamplesIn_dout,
        if_num_data_valid => s_avgBSamplesIn_num_data_valid,
        if_fifo_cap => s_avgBSamplesIn_fifo_cap,
        if_empty_n => s_avgBSamplesIn_empty_n,
        if_read => event_writer_U0_s_avgBSamplesIn_read);

    start_for_avgHeaderDiv_U0_U : component mpd_data_processor_main_start_for_avgHeaderDiv_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_avgHeaderDiv_U0_din,
        if_full_n => start_for_avgHeaderDiv_U0_full_n,
        if_write => frame_decoder_U0_start_write,
        if_dout => start_for_avgHeaderDiv_U0_dout,
        if_empty_n => start_for_avgHeaderDiv_U0_empty_n,
        if_read => avgHeaderDiv_U0_ap_ready);

    start_for_avgBSamplesFifoProc_U0_U : component mpd_data_processor_main_start_for_avgBSamplesFifoProc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_avgBSamplesFifoProc_U0_din,
        if_full_n => start_for_avgBSamplesFifoProc_U0_full_n,
        if_write => avgB_U0_start_write,
        if_dout => start_for_avgBSamplesFifoProc_U0_dout,
        if_empty_n => start_for_avgBSamplesFifoProc_U0_empty_n,
        if_read => avgBSamplesFifoProc_U0_ap_ready);




    avgBSamplesFifoProc_U0_ap_continue <= ap_const_logic_1;
    avgBSamplesFifoProc_U0_ap_start <= start_for_avgBSamplesFifoProc_U0_empty_n;
    avgB_U0_ap_continue <= ap_const_logic_1;
    avgB_U0_ap_start <= ap_const_logic_1;
    avgHeaderDiv_U0_ap_continue <= ap_const_logic_1;
    avgHeaderDiv_U0_ap_start <= start_for_avgHeaderDiv_U0_empty_n;
    event_writer_U0_ap_continue <= ap_const_logic_1;
    event_writer_U0_ap_start <= ap_const_logic_1;
    frame_decoder_U0_ap_continue <= ap_const_logic_1;
    frame_decoder_U0_ap_start <= ap_const_logic_1;
    m_apvThrB_address0 <= avgB_U0_m_apvThrB_address0;
    m_apvThrB_address1 <= ap_const_lv11_0;
    m_apvThrB_ce0 <= avgB_U0_m_apvThrB_ce0;
    m_apvThrB_ce1 <= ap_const_logic_0;
    m_apvThrB_d0 <= ap_const_lv13_0;
    m_apvThrB_d1 <= ap_const_lv13_0;
    m_apvThrB_we0 <= ap_const_logic_0;
    m_apvThrB_we1 <= ap_const_logic_0;
    m_apvThr_address0 <= event_writer_U0_m_apvThr_address0;
    m_apvThr_address1 <= ap_const_lv11_0;
    m_apvThr_ce0 <= event_writer_U0_m_apvThr_ce0;
    m_apvThr_ce1 <= ap_const_logic_0;
    m_apvThr_d0 <= ap_const_lv13_0;
    m_apvThr_d1 <= ap_const_lv13_0;
    m_apvThr_we0 <= ap_const_logic_0;
    m_apvThr_we1 <= ap_const_logic_0;
    m_offset_address0 <= frame_decoder_U0_m_offset_address0;
    m_offset_address1 <= ap_const_lv10_0;
    m_offset_ce0 <= frame_decoder_U0_m_offset_ce0;
    m_offset_ce1 <= ap_const_logic_0;
    m_offset_d0 <= ap_const_lv26_0;
    m_offset_d1 <= ap_const_lv26_0;
    m_offset_we0 <= ap_const_logic_0;
    m_offset_we1 <= ap_const_logic_0;
    s_evIn_read <= frame_decoder_U0_s_evIn_read;
    s_evOut_din <= event_writer_U0_s_evOut_din;
    s_evOut_write <= event_writer_U0_s_evOut_write;
    start_for_avgBSamplesFifoProc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_avgHeaderDiv_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
